Assume we dispose of an "elementary" matrix (i wont be a fascist about the word "elementary") <math>M</math> satisfying

<math>M_{i,j}</math> is the probability of winning a fight with <math>i</math> attackers and <math>j</math> defenders.

Note from Alex: this Matrix is available on http://en.wikipedia.org/wiki/Risk_(game)#Dice_probabilities

Say that <math>M</math> is big enough so that we cover all the possible cases
(typically <math>M</math> is of order <math>N</math> with <math>N=50,60,100</math>?! 20 seems a bit too tiny).

Maintenant, on se pose la question suivante : je suis au point 1, j'ai des vues sur le point P, et j'ai envie de tester la proba d'arriver en vie au point P par le chemin <math>(1,2,\cdots,P)</math>. L'idée c'est d'associer une note à ce chemin, et ensuite de comparer tous les chemins possibles de 1 à P et de prendre celui ac la meilleure note.

Notes from Thomas: 
- En fait c'est un peu plus compliqué, car je peux vouloir non seulement aller de 1 à P mais en imposant de passer via un point P' où je souhaite laisser au moins n soldats (pour pouvoir le défendre).
- On peut penser a utiliser des algorithmes de routage style réseau, pour calculer les chemins.
- La question des probas ne se pose que pour savoir, sur le chemin choisi, si l'on décide d'attaquer car la proba de réussite est suffisamment élevée. En fait quand on construit le chemin qu'on veut (ou qu'on choisit parmi tous les chemins), il n'y a pas un besoin absolu de faire de calcul de proba pour calculer le score du chemin, mais simplement de regarder les poids des différents arcs du chemin.